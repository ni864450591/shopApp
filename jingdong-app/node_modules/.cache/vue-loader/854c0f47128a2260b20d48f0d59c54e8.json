{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\src\\components\\Toast.vue?vue&type=template&id=0321d2b2&scoped=true","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\src\\components\\Toast.vue","mtime":1620527256085},{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1616796459000},{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1616796459000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICA8ZGl2IGNsYXNzPSJ0b2FzdCI+e3sgbWVzc2FnZSB9fTwvZGl2Pg0K"},{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\jingdongdemo\\jingdong-app\\src\\components\\Toast.vue"],"names":[],"mappings":";GACG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/Administrator/Desktop/jingdongdemo/jingdong-app/src/components/Toast.vue","sourceRoot":"","sourcesContent":["<template>\r\n   <div class=\"toast\">{{ message }}</div>\r\n</template>\r\n\r\n<script>\r\n//  这里可以优化\r\n//  弹窗内容的显示：先是父组件拿到了弹窗内容设置的方法，然后在登录事件中使用，使用的时候只需要提供弹框的内容即可\r\n//  然后再在弹窗组件中设置弹窗内容，返回出去，父组件再返回回来\r\n//  这里应该是父组件只提供弹窗的内容,然后设置完后弹窗的内容后子组件自己展示，不需要通过父组件传参的方式来显示\r\nimport { reactive, toRefs } from 'vue'\r\nexport default {\r\n  name: 'Toast',\r\n  props: ['message']\r\n}\r\n// 这里是弹框的逻辑\r\nexport const useToastEffect = () => {\r\n  //  弹框的显示与否，以及弹框需要显示的内容\r\n  const toastData = reactive({\r\n    showToast: false,\r\n    toastmessage: ''\r\n  })\r\n  // 这里是设置弹框的内容，2s后弹框消失,并将内容置空\r\n  const toastMessage = (message) => {\r\n    toastData.showToast = true\r\n    toastData.toastmessage = message\r\n    setTimeout(() => {\r\n      toastData.showToast = false\r\n      toastData.toastmessage = ''\r\n    }, 2000)\r\n  }\r\n  const { showToast, toastmessage } = toRefs(toastData)\r\n  return { showToast, toastmessage, toastMessage }\r\n}\r\n</script>\r\n\r\n<style lang='scss' scoped>\r\n@import '../style/viriables';\r\n.toast{\r\n    position: fixed;\r\n    top:50%;\r\n    left:50%;\r\n    transform: translate(-50%, -50%);\r\n    background: rgba(0, 0, 0 , .35);\r\n    border-radius:  .05rem;\r\n    padding: .1rem;\r\n    color:$bgColor;\r\n    font-size:  .16rem;\r\n    text-align: center;\r\n}\r\n</style>\r\n"]}]}